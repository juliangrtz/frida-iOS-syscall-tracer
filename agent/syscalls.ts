import { Config } from "./config";
import { log, logWarning } from "./logger";

type Syscall = {
    name: String;
    signature: String;
}

const functionSignatureRegex = /^([\w\s*]+)\s+(\w+)\s*\(([\w\s*,*]+)\)$/;

function formatValueByType(value: NativePointer, type: String) {
    switch (type) {
        case "int":
        case "size_t":
            return value.toInt32();
        case "char*":
            return `"${value.readCString()}"`;
        case "void*":
            return `ptr(${value})`;
        // TODO: Add more types
        default:
            if (Config.verbose)
                logWarning("Unknown type " + type);

            return value;
    }
}

function formatArguments(syscall: Syscall, cpuContext: Arm64CpuContext) {
    let signature = syscall.signature;

    if (signature == "")
        return "";

    let result = "";
    const match = signature.match(functionSignatureRegex);

    if (match) {
        //returnType = match[1].trim();
        //functionName = match[2].trim();
        const argumentList = match[3].split(',');

        for (let i = 0; i < argumentList.length; ++i) {
            let split = argumentList[i].trim().split(" ");
            let type = split[0];
            let name = split[1];
            let value = cpuContext[`x${i}` as keyof Arm64CpuContext] as NativePointer;

            result += (type == "") ? value : `${name}=${formatValueByType(value, type)}`;

            if (i != argumentList.length - 1)
                result += ", ";
        }
    } else {
        logWarning('Invalid function signature for syscall ' + syscall.name);
    }

    return result;
}

export function printSyscall(cpuContext: NativePointerValue, _: NativePointerValue){
    log(cpuContext);

    /*
        https://www.theiphonewiki.com/wiki/Kernel_Syscalls#Note_on_these
        "Args go in their normal registers, like arg1 in R0/X0, as usual.
        Syscall # goes in IP (that's intra-procedural, not instruction pointer!), a.k.a. R12/X16."
    */
    let context = cpuContext as unknown as Arm64CpuContext;
    let syscallNumber = context.x16.toInt32();
    let syscall = undefined;

    if (syscallNumber < 0) {
        if (!Config.logMachSyscalls) {
            return;
        }
        syscall = MACH_SYSCALLS[syscallNumber] ?? "Unknown syscall";
    } else {
        syscall = POSIX_SYSCALLS[syscallNumber] ?? "Unknown syscall";
    }

    log(`${syscall.name}(${formatArguments(syscall, context)})`);

    if (Config.verbose) {
        let backtrace = Thread.backtrace(context, Config.syscallLogBacktracerType).map(DebugSymbol.fromAddress);

        for (let i in backtrace)
            console.log(backtrace[i]);
    }
}

/*
Read this documentation if you want to learn about specific syscalls:
https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/
*/


// https://github.com/apple-oss-distributions/xnu/blob/main/osfmk/kern/syscall_sw.c#L105
export const MACH_SYSCALLS: Record<number, Syscall> = {
    1: { name: "kern_invalid", signature: "" },
    2: { name: "kern_invalid", signature: "" },
    3: { name: "kern_invalid", signature: "" },
    4: { name: "kern_invalid", signature: "" },
    5: { name: "kern_invalid", signature: "" },
    6: { name: "kern_invalid", signature: "" },
    7: { name: "kern_invalid", signature: "" },
    8: { name: "kern_invalid", signature: "" },
    9: { name: "kern_invalid", signature: "" },
    10: { name: "_kernelrpc_mach_vm_allocate_trap", signature: "" },
    11: { name: "_kernelrpc_mach_vm_purgable_control_trap", signature: "" },
    12: { name: "_kernelrpc_mach_vm_deallocate_trap", signature: "" },
    13: { name: "task_dyld_process_info_notify_get_trap", signature: "" },
    14: { name: "_kernelrpc_mach_vm_protect_trap", signature: "" },
    15: { name: "_kernelrpc_mach_vm_map_trap", signature: "" },
    16: { name: "_kernelrpc_mach_port_allocate_trap", signature: "" },
    17: { name: "kern_invalid", signature: "" },
    18: { name: "_kernelrpc_mach_port_deallocate_trap", signature: "" },
    19: { name: "_kernelrpc_mach_port_mod_refs_trap", signature: "" },
    20: { name: "_kernelrpc_mach_port_move_member_trap", signature: "" },
    21: { name: "_kernelrpc_mach_port_insert_right_trap", signature: "" },
    22: { name: "_kernelrpc_mach_port_insert_member_trap", signature: "" },
    23: { name: "_kernelrpc_mach_port_extract_member_trap", signature: "" },
    24: { name: "_kernelrpc_mach_port_construct_trap", signature: "" },
    25: { name: "_kernelrpc_mach_port_destruct_trap", signature: "" },
    26: { name: "mach_reply_port", signature: "" },
    27: { name: "thread_self_trap", signature: "" },
    28: { name: "task_self_trap", signature: "" },
    29: { name: "host_self_trap", signature: "" },
    30: { name: "kern_invalid", signature: "" },
    31: { name: "mach_msg_trap", signature: "" },
    32: { name: "mach_msg_overwrite_trap", signature: "" },
    33: { name: "semaphore_signal_trap", signature: "" },
    34: { name: "semaphore_signal_all_trap", signature: "" },
    35: { name: "semaphore_signal_thread_trap", signature: "" },
    36: { name: "semaphore_wait_trap", signature: "" },
    37: { name: "semaphore_wait_signal_trap", signature: "" },
    38: { name: "semaphore_timedwait_trap", signature: "" },
    39: { name: "semaphore_timedwait_signal_trap", signature: "" },
    40: { name: "_kernelrpc_mach_port_get_attributes_trap", signature: "" },
    41: { name: "_kernelrpc_mach_port_guard_trap", signature: "" },
    42: { name: "_kernelrpc_mach_port_unguard_trap", signature: "" },
    43: { name: "mach_generate_activity_id", signature: "" },
    44: { name: "task_name_for_pid", signature: "" },
    45: { name: "task_for_pid", signature: "" },
    46: { name: "pid_for_task", signature: "" },
    47: { name: "mach_msg2_trap", signature: "" },
    48: { name: "macx_swapon", signature: "" },
    49: { name: "macx_swapoff", signature: "" },
    50: { name: "thread_get_special_reply_port", signature: "" },
    51: { name: "macx_triggers", signature: "" },
    52: { name: "macx_backing_store_suspend", signature: "" },
    53: { name: "macx_backing_store_recovery", signature: "" },
    54: { name: "kern_invalid", signature: "" },
    55: { name: "kern_invalid", signature: "" },
    56: { name: "kern_invalid", signature: "" },
    57: { name: "kern_invalid", signature: "" },
    58: { name: "pfz_exit", signature: "" },
    59: { name: "swtch_pri", signature: "" },
    60: { name: "swtch", signature: "" },
    61: { name: "thread_switch", signature: "" },
    62: { name: "clock_sleep_trap", signature: "" },
    63: { name: "kern_invalid", signature: "" },
    64: { name: "kern_invalid", signature: "" },
    65: { name: "kern_invalid", signature: "" },
    66: { name: "kern_invalid", signature: "" },
    67: { name: "kern_invalid", signature: "" },
    68: { name: "kern_invalid", signature: "" },
    69: { name: "kern_invalid", signature: "" },
    70: { name: "host_create_mach_voucher_trap", signature: "" },
    71: { name: "kern_invalid", signature: "" },
    72: { name: "mach_voucher_extract_attr_recipe_trap", signature: "" },
    73: { name: "kern_invalid", signature: "" },
    74: { name: "kern_invalid", signature: "" },
    75: { name: "kern_invalid", signature: "" },
    76: { name: "_kernelrpc_mach_port_type_trap", signature: "" },
    77: { name: "_kernelrpc_mach_port_request_notification_trap", signature: "" },
    78: { name: "kern_invalid", signature: "" },
    79: { name: "kern_invalid", signature: "" },
    80: { name: "kern_invalid", signature: "" },
    81: { name: "kern_invalid", signature: "" },
    82: { name: "kern_invalid", signature: "" },
    83: { name: "kern_invalid", signature: "" },
    84: { name: "kern_invalid", signature: "" },
    85: { name: "kern_invalid", signature: "" },
    86: { name: "kern_invalid", signature: "" },
    87: { name: "kern_invalid", signature: "" },
    88: { name: "kern_invalid", signature: "" },
    89: { name: "mach_timebase_info_trap", signature: "" },
    90: { name: "mach_wait_until_trap", signature: "" },
    91: { name: "mk_timer_create_trap", signature: "" },
    92: { name: "mk_timer_destroy_trap", signature: "" },
    93: { name: "mk_timer_arm_trap", signature: "" },
    94: { name: "mk_timer_cancel_trap", signature: "" },
    95: { name: "mk_timer_arm_leeway_trap", signature: "" },
    96: { name: "debug_control_port_for_pid", signature: "" },
    97: { name: "kern_invalid", signature: "" },
    98: { name: "kern_invalid", signature: "" },
    99: { name: "kern_invalid", signature: "" },
    100: { name: "iokit_user_client_trap", signature: "" },
    101: { name: "kern_invalid", signature: "" },
    102: { name: "kern_invalid", signature: "" },
    103: { name: "kern_invalid", signature: "" },
    104: { name: "kern_invalid", signature: "" },
    105: { name: "kern_invalid", signature: "" },
    106: { name: "kern_invalid", signature: "" },
    107: { name: "kern_invalid", signature: "" },
    108: { name: "kern_invalid", signature: "" },
    109: { name: "kern_invalid", signature: "" },
    110: { name: "kern_invalid", signature: "" },
    111: { name: "kern_invalid", signature: "" },
    112: { name: "kern_invalid", signature: "" },
    113: { name: "kern_invalid", signature: "" },
    114: { name: "kern_invalid", signature: "" },
    115: { name: "kern_invalid", signature: "" },
    116: { name: "kern_invalid", signature: "" },
    117: { name: "kern_invalid", signature: "" },
    118: { name: "kern_invalid", signature: "" },
    119: { name: "kern_invalid", signature: "" },
    120: { name: "kern_invalid", signature: "" },
    121: { name: "kern_invalid", signature: "" },
    122: { name: "kern_invalid", signature: "" },
    123: { name: "kern_invalid", signature: "" },
    124: { name: "kern_invalid", signature: "" },
    125: { name: "kern_invalid", signature: "" },
    126: { name: "kern_invalid", signature: "" },
    127: { name: "kern_invalid", signature: "" }
}

// https://github.com/xybp888/iOS-SDKs/blob/master/iPhoneOS16.4.sdk/usr/include/sys/syscall.h 
export const POSIX_SYSCALLS: Record<number, Syscall> = {
    0: { name: "syscall", signature: "" },
    1: { name: "exit", signature: "void exit(int status)" },
    2: { name: "fork", signature: "int fork()" },
    3: { name: "read", signature: "size_t read(int fd, void* cbuf, size_t nbyte)" },
    4: { name: "write", signature: "size_t write(int fd, void* cbuf, size_t nbyte)" },
    5: { name: "open", signature: "int open(char* path, int flags, int mode)" },
    6: { name: "close", signature: "int close(int fd)" },
    7: { name: "wait4", signature: "int wait4(int pid, void* status, int options, void* rusage)" },
    8: { name: "creat", signature: "" },
    9: { name: "link", signature: "int link(char* path, char* link)" },
    10: { name: "unlink", signature: "int unlink(char* path)" },
    11: { name: "execv", signature: "" },
    12: { name: "chdir", signature: "int chdir(char* path)" },
    13: { name: "fchdir", signature: "int fchdir(int fd)" },
    14: { name: "mknod", signature: "int mknod(char* path, int mode, int dev)" },
    15: { name: "chmod", signature: "int chmod(char* path, int mode)" },
    16: { name: "chown", signature: "int chown(char* path, int uid, int gid)" },
    18: { name: "getfsstat", signature: "int getfsstat(void* buf, int bufsize, int flags)" },
    19: { name: "lseek", signature: "" },
    20: { name: "getpid", signature: "int getpid()" },
    21: { name: "mount", signature: "" },
    22: { name: "umount", signature: "" },
    23: { name: "setuid", signature: "int setuid(int uid)" },
    24: { name: "getuid", signature: "int getuid()" },
    25: { name: "geteuid", signature: "int geteuid()" },
    26: { name: "ptrace", signature: "int ptrace(int req, int pid, void* addr, int data)" },
    27: { name: "recvmsg", signature: "int recvmsg(int s, void* msg, int flags)" },
    28: { name: "sendmsg", signature: "int sendmsg(int s, void* msg, int flags)" },
    29: { name: "recvfrom", signature: "int recvfrom(int s, void *buf, size_t len, int flags, void* from, void* fromlenaddr)" },
    30: { name: "accept", signature: "int accept(int s, void* name, void* anamelen)" },
    31: { name: "getpeername", signature: "int getpeername(int fdes, void* asa, void* alen)" },
    32: { name: "getsockname", signature: "int getsockname(int fdes, void* asa, void* alen)" },
    33: { name: "access", signature: "int access(char* path, int flags)" },
    34: { name: "chflags", signature: "int chflags(char*  path, int flags)" },
    35: { name: "fchflags", signature: "int fchflags(int fd, int flags)" },
    36: { name: "sync", signature: "int sync()" },
    37: { name: "kill", signature: "int kill(int pid, int signum, int posix)" },
    38: { name: "stat", signature: "" },
    39: { name: "getppid", signature: "int getppid()" },
    40: { name: "lstat", signature: "" },
    41: { name: "dup", signature: "int dup(uint fd)" },
    42: { name: "pipe", signature: "int pipe()" },
    43: { name: "getegid", signature: "int getegid()" },
    44: { name: "profil", signature: "int profil(void* bufbase, size_t bufsize, ulong pcoffset, uint pcscale)" },
    45: { name: "ktrace", signature: "" },
    46: { name: "sigaction", signature: "int sigaction(int signum, void* nsa, void* osa)" },
    47: { name: "getgid", signature: "int getgid()" },
    48: { name: "sigprocmask", signature: "int sigprocmask(int how, void* mask, void* omask)" },
    49: { name: "getlogin", signature: "int getlogin(char* namebuf, uint namelen)" },
    50: { name: "setlogin", signature: "int setlogin(char* namebuf)" },
    51: { name: "acct", signature: "int acct(char* path)" },
    52: { name: "sigpending", signature: "int sigpending(void* osv)" },
    53: { name: "sigaltstack", signature: "int sigaltstack(void* nss, void* oss)" },
    54: { name: "ioctl", signature: "int ioctl(int fd, ulong com, void* data)" },
    55: { name: "reboot", signature: "int reboot(int opt, char* command)" },
    56: { name: "revoke", signature: "int revoke(char* path)" },
    57: { name: "symlink", signature: "int symlink(char* path, char* link)" },
    58: { name: "readlink", signature: "int readlink(char* path, char* buf, int count)" },
    59: { name: "execve", signature: "int execve(char* fname, char** argp, char** envp)" },
    60: { name: "umask", signature: "int umask(int newmask)" },
    61: { name: "chroot", signature: "int chroot(char* path)" },
    62: { name: "fstat", signature: "int fstat(int fildes, void* buf)" },
    63: { name: "invalid", signature: "" },
    64: { name: "getpagesize", signature: "" },
    65: { name: "msync", signature: "int msync(void* addr, size_t len, int flags)" },
    66: { name: "vfork", signature: "int vfork()" },
    67: { name: "vread", signature: "" },
    68: { name: "vwrite", signature: "" },
    69: { name: "sbrk", signature: "" },
    70: { name: "sstk", signature: "" },
    71: { name: "mmap", signature: "" },
    72: { name: "vadvise", signature: "" },
    73: { name: "munmap", signature: "int munmap(void* addr, size_t len)" },
    74: { name: "mprotect", signature: "int mprotect(void* addr, size_t len, int prot)" },
    75: { name: "madvise", signature: "int madvise(void* addr, size_t len, int behav)" },
    76: { name: "vhangup", signature: "" },
    77: { name: "vlimit", signature: "" },
    78: { name: "mincore", signature: "int mincore(void* addr, size_t len, void* vec)" },
    79: { name: "getgroups", signature: "int getgroups(uint gidsetsize, void* gidset)" },
    80: { name: "setgroups", signature: "int setgroups(uint gidsetsize, void* gidset)" },
    81: { name: "getpgrp", signature: "int getpgrp()" },
    82: { name: "setpgid", signature: "int setpgid(int pid, int pgid)" },
    83: { name: "setitimer", signature: "int setitimer(uint which, void* itv, void* oitv)" },
    85: { name: "swapon", signature: "int swapon()" },
    86: { name: "getitimer", signature: "int getitimer(uint which, void* itv)" },
    89: { name: "getdtablesize", signature: "int getdtablesize()" },
    90: { name: "dup2", signature: "int dup2(uint from, uint to)" },
    91: { name: "getdopt", signature: "" },
    92: { name: "fcntl", signature: "int fcntl(int fd, int cmd, long arg)" },
    93: { name: "select", signature: "int select(int nd, uint *in, uint *ou, uint *ex, void* tv)" },
    95: { name: "fsync", signature: "int fsync(int fd)" },
    96: { name: "setpriority", signature: "int setpriority(int which, id_t who, int prio)" },
    97: { name: "socket", signature: "int socket(int domain, int type, int protocol)" },
    98: { name: "connect", signature: "int connect(int s, char* name, int namelen)" },
    99: { name: "accept", signature: "" },
    100: { name: "getpriority", signature: "int getpriority(int which, int who)" },
    104: { name: "bind", signature: "int bind(int s, char* name, int namelen)" },
    105: { name: "setsockopt", signature: "int setsockopt(int s, int level, int name, void* val, size_t valsize)" },
    106: { name: "listen", signature: "int listen(int s, int backlog)" },
    111: { name: "sigsuspend", signature: "int sigsuspend(void* sigmask)" },
    116: { name: "gettimeofday", signature: "int gettimeofday(void* tp, void* tzp)" },
    117: { name: "getrusage", signature: "int getrusage(int class, void* r)" },
    118: { name: "getsockopt", signature: "int getsockopt(int s, int level, int name, void* val, void* valsize)" },
    120: { name: "readv", signature: "int readv(int filedes, void* iov, int iovcnt)" },
    121: { name: "writev", signature: "int writev(int filedes, void* iov, int iovcnt)" },
    122: { name: "settimeofday", signature: "int settimeofday(void* tp, void* tzp)" },
    123: { name: "fchown", signature: "int fchown(int fd, int uid, int gid)" },
    124: { name: "fchmod", signature: "int fchmod(int fd, int mode)" },
    126: { name: "setreuid", signature: "int setreuid(int ruid, int euid)" },
    127: { name: "setregid", signature: "int setregid(int rgid, int egid)" },
    128: { name: "rename", signature: "int rename(char* from, char* to)" },
    131: { name: "flock", signature: "int flock(int fd, int how)" },
    132: { name: "mkfifo", signature: "int mkfifo(char* path, int mode)" },
    133: { name: "sendto", signature: "int sendto(int s, void* buf, size_t len, void* to, size_t tolen)" },
    134: { name: "shutdown", signature: "int shutdown(int s, int how)" },
    135: { name: "socketpair", signature: "int socketpair(int domain, int type, int protocol, void* rsv)" },
    136: { name: "mkdir", signature: "int mkdir(char* path, int mode)" },
    137: { name: "rmdir", signature: "int rmdir(char* path)" },
    138: { name: "utimes", signature: "int utimes(char* path, void* tptr)" },
    139: { name: "futimes", signature: "int futimes(int fd, void* tptr)" },
    140: { name: "adjtime", signature: "int adjtime(void* delta, void* olddelta)" },
    142: { name: "gethostuuid", signature: "int gethostuuid(char* uuid_buf, void* timeoutp)" },
    147: { name: "setsid", signature: "int setsid()" },
    151: { name: "getpgid", signature: "int getpgid(int pid)" },
    152: { name: "setprivexec", signature: "int setprivexec(int flag)" },
    153: { name: "pread", signature: "size_t pread(int fd, void* buf, size_t nbyte, int offset)" },
    154: { name: "pwrite", signature: "size_t pwrite(int fd, void* buf, usize_t nbyte, int offset)" },
    155: { name: "nfssvc", signature: "int nfssvc(int flag, void* argp)" },
    157: { name: "statfs", signature: "int statfs(char* path, void* buf)" },
    158: { name: "fstatfs", signature: "int fstatfs(int fd, void* buf)" },
    159: { name: "unmount", signature: "int unmount(char* path, int flags)" },
    161: { name: "getfh", signature: "int getfh(char* fname, void* fhp)" },
    165: { name: "quotactl", signature: "int quotactl(char* path, int cmd, int uid, void* arg)" },
    167: { name: "mount", signature: "void mount(char* type, char* path, int flags, void* data)" },
    169: { name: "csops", signature: "void csops(int pid, uint ops, void* useraddr, size_t usersize)" },
    170: { name: "csops_audittoken", signature: "" },
    173: { name: "waitid", signature: "int waitid(void* idtype, int id, siginfo_t *infop, int options)" },
    180: { name: "kdebug_trace", signature: "int kdebug_trace(int code, int arg1, int arg2, int arg3, int arg4, int arg5)" },
    181: { name: "setgid", signature: "int setgid(int egid)" },
    182: { name: "setegid", signature: "int setegid(int egid)" },
    183: { name: "seteuid", signature: "int seteuid(int euid)" },
    184: { name: "sigreturn", signature: "int sigreturn(void* uctx, int infostyle)" },
    185: { name: "chud", signature: "int chud(ulong code, ulong arg1, ulong arg2, ulong arg3, ulong arg4, ulong arg5)" },
    187: { name: "fdatasync", signature: "int fdatasync(int fd)" },
    188: { name: "stat", signature: "int stat(char* path, void* sb)" },
    189: { name: "fstat", signature: "int fstat(int fd, void* sb)" },
    190: { name: "lstat", signature: "int lstat(char* path, void* sb)" },
    191: { name: "pathconf", signature: "int pathconf(char* path, int name)" },
    192: { name: "fpathconf", signature: "int fpathconf(int fd, int name)" },
    194: { name: "getrlimit", signature: "int getrlimit(uint which, void* rlp)" },
    195: { name: "setrlimit", signature: "int setrlimit(uint which, void* rlp)" },
    196: { name: "getdirentries", signature: "int getdirentries(int fd, char* buf, uint count, void* basep)" },
    197: { name: "mmap", signature: "void mmap(void* addr, size_t len, int prot, int flags, int fd, int pos)" },
    199: { name: "lseek", signature: "int lseek(int fd, int offset, int whence)" },
    200: { name: "truncate", signature: "int truncate(char* path, int length)" },
    201: { name: "ftruncate", signature: "int ftruncate(int fd, int length)" },
    202: { name: "__sysctl", signature: "int __sysctl(void* name, uint namelen, void *old, void* oldlenp, void *new, size_t newlen)" },
    203: { name: "mlock", signature: "int mlock(void* addr, size_t len)" },
    204: { name: "munlock", signature: "int munlock(void* addr, size_t len)" },
    205: { name: "undelete", signature: "int undelete(char* path)" },
    216: { name: "mkcomplex", signature: "int mkcomplex(char* path, int mode, ulong type)" },
    220: { name: "getattrlist", signature: "int getattrlist(char* path, void* alist, void* attributeBuffer, size_t bufferSize, ulong options)" },
    221: { name: "setattrlist", signature: "int setattrlist(char* path, void* alist, void* attributeBuffer, size_t bufferSize, ulong options)" },
    222: { name: "getdirentriesattr", signature: "int getdirentriesattr(int fd, void* alist, void *buffer, size_t buffersize, void* count, void* basep, void* newstate, ulong options)" },
    223: { name: "exchangedata", signature: "int exchangedata(char* path1, char* path2, ulong options)" },
    225: { name: "searchfs", signature: "int searchfs(char* path, void* sblock, uint *nummatches, uint scriptcode, uint options, void* state)" },
    226: { name: "delete", signature: "int delete(void* path)" },
    227: { name: "copyfile", signature: "int copyfile(char* from, char* to, int mode, int flags)" },
    228: { name: "fgetattrlist", signature: "int fgetattrlist(int fd, attrlist *alist, void *attributeBuffer, size_t bufferSize, ulong options)" },
    229: { name: "fsetattrlist", signature: "int fsetattrlist(int fd, attrlist *alist, void *attributeBuffer, size_t bufferSize, ulong options)" },
    230: { name: "poll", signature: "int poll(pollfd *fds, uint nfds, int timeout)" },
    231: { name: "watchevent", signature: "int watchevent(eventreq *u_req, int u_eventmask)" },
    232: { name: "waitevent", signature: "int waitevent(eventreq *u_req, timeval *tv)" },
    233: { name: "modwatch", signature: "int modwatch(eventreq *u_req, int u_eventmask)" },
    234: { name: "getxattr", signature: "size_t getxattr(void* path, void* attrname, void* value, size_t size, uint position, int options)" },
    235: { name: "fgetxattr", signature: "size_t fgetxattr(int fd, void* attrname, void* value, size_t size, uint position, int options)" },
    236: { name: "setxattr", signature: "int setxattr(void* path, void* attrname, void* value, size_t size, uint position, int options)" },
    237: { name: "fsetxattr", signature: "int fsetxattr(int fd, void* attrname, void* value, size_t size, uint position, int options)" },
    238: { name: "removexattr", signature: "int removexattr(void* path, void* attrname, int options)" },
    239: { name: "fremovexattr", signature: "int fremovexattr(int fd, void* a ttrname, int options)" },
    240: { name: "listxattr", signature: "size_t listxattr(void* path, void* namebuf, size_t bufsize, int options)" },
    241: { name: "flistxattr", signature: "size_t flistxattr(int fd, char* namebuf, size_t size, int options)" },
    242: { name: "fsctl", signature: "int fsctl(char* path, ulong cmd, caddr_t data, uint options)" },
    243: { name: "initgroups", signature: "int initgroups(uint gidsetsize, int *gidset, int gmuid)" },
    244: { name: "posix_spawn", signature: "int posix_spawn(int *pid, char* path, _posix_spawn_args_desc *adesc, char* *argv, char* *envp)" },
    245: { name: "ffsctl", signature: "int ffsctl(int fd, ulong cmd, caddr_t data, uint options)" },
    250: { name: "minherit", signature: "int minherit(void *addr, size_t len, int inherit)" },
    266: { name: "shm_open", signature: "int shm_open(char* name, int oflag, ...)" },
    267: { name: "shm_unlink", signature: "int shm_unlink(char* name)" },
    268: { name: "sem_open", signature: "sem_t *sem_open(char* name, int oflag, ...)" },
    269: { name: "sem_close", signature: "int sem_close(sem_t *sem)" },
    270: { name: "sem_unlink", signature: "int sem_unlink(char* name)" },
    271: { name: "sem_wait", signature: "int sem_wait(sem_t *sem)" },
    272: { name: "sem_trywait", signature: "int sem_trywait(sem_t *sem)" },
    273: { name: "sem_post", signature: "int sem_post(sem_t *sem)" },
    274: { name: "sem_getvalue", signature: "int sem_getvalue(sem_t *sem, int *sval)" },
    275: { name: "sem_init", signature: "int sem_init(sem_t *sem, int phsared, uint value)" },
    276: { name: "sem_destroy", signature: "int sem_destroy(sem_t *sem)" },
    277: { name: "open_extended", signature: "int open_extended(void* path, int flags, int uid, int gid, int mode, void* xsecurity)" },
    278: { name: "umask_extended", signature: "int umask_extended(int newmask, void* xsecurity)" },
    279: { name: "stat_extended", signature: "int stat_extended(void* path, void* ub, void* xsecurity, void* xsecurity_size)" },
    280: { name: "lstat_extended", signature: "int lstat_extended(void* path, void* ub,  void* xsecurity, void* xsecurity_size)" },
    281: { name: "fstat_extended", signature: "int fstat_extended(int fd, void* ub, void* xsecurity, void* xsecurity_size)" },
    282: { name: "chmod_extended", signature: "int chmod_extended(void* path, int uid, int gid, int mode, void* xsecurity)" },
    283: { name: "fchmod_extended", signature: "int fchmod_extended(int fd, int uid, int gid, int mode, void* xsecurity)" },
    284: { name: "access_extended", signature: "int access_extended(void* entries, size_t size, void* results, int uid)" },
    285: { name: "settid", signature: "int settid(int uid, int gid)" },
    286: { name: "gettid", signature: "int gettid(int *uidp, int *gidp)" },
    287: { name: "setsgroups", signature: "int setsgroups(int setlen, void* guidset)" },
    288: { name: "getsgroups", signature: "int getsgroups(void* setlen, void* guidset)" },
    289: { name: "setwgroups", signature: "int setwgroups(int setlen, uint guidset)" },
    290: { name: "getwgroups", signature: "int getwgroups (int *setlen, uint guidset)" },
    291: { name: "mkfifo_extended", signature: "int mkfifo_extended(void* path, int uid, int gid, int mode, void* xsecurity)" },
    292: { name: "mkdir_extended", signature: "int mkdir_extended(void* path, int uid, int gid, int mode, void* xsecurity)" },
    294: { name: "shared_region_check_np", signature: "int shared_region_check_np(ulong *startaddress)" },
    296: { name: "vm_pressure_monitor", signature: "int vm_pressure_monitor (int wait_for_pressure, int nsecs_monitored, uint *pages_reclaimed)" },
    297: { name: "psynch_rw_longrdlock", signature: "uint psynch_rw_longrdlock(void* rwlock, uint lgenval, uint ugenval, uint rw_wc, int flags)" },
    298: { name: "psynch_rw_yieldwrlock", signature: "uint psynch_rw_yieldwrlock(void* rwlock, uint lgenval, uint ugenval, uint rw_wc, int flags)" },
    299: { name: "psynch_rw_downgrade", signature: "int psynch_rw_downgrade(void* rwlock, uint lgenval, uint ugenval, uint rw_wc, int flags)" },
    300: { name: "psynch_rw_upgrade", signature: "uint psynch_rw_upgrade(void* rwlock, uint lgenval, uint ugenval, uint rw_wc, int flags)" },
    301: { name: "psynch_mutexwait", signature: "uint psynch_mutexwait(void* mutex, uint mgen, uint ugen, ulong tid, uint flags)" },
    302: { name: "psynch_mutexdrop", signature: "uint psynch_mutexdrop(void* mutex, uint mgen, uint ugen, ulong tid, uint flags)" },
    303: { name: "psynch_cvbroad", signature: "uint psynch_cvbroad(void* cv, ulong cvlsgen, ulong cvudgen, uint flags, void* mutex, ulong mugen, ulong tid)" },
    304: { name: "psynch_cvsignal", signature: "uint psynch_cvsignal(void* cv, ulong cvlsgen, uint cvugen, int thread_port, void* mutex, ulong mugen, ulong tid, uint flags)" },
    305: { name: "psynch_cvwait", signature: "uint psynch_cvwait(void* cv, ulong cvlsgen, uint cvugen, void* mutex, ulong mugen, uint flags, int64_t sec, uint nsec)" },
    306: { name: "psynch_rw_rdlock", signature: "uint psynch_rw_rdlock(void* rwlock, uint lgenval, uint ugenval, uint rw_wc, int flags)" },
    307: { name: "psynch_rw_wrlock", signature: "uint psynch_rw_wrlock(void* rwlock, uint lgenval, uint ugenval, uint rw_wc, int flags)" },
    308: { name: "psynch_rw_unlock", signature: "uint psynch_rw_unlock(void* rwlock, uint lgenval, uint ugenval, uint rw_wc, int flags)" },
    309: { name: "psynch_rw_unlock2", signature: "uintpsynch_rw_unlock2(void* rwlock, uint lgenval, uint ugenval, uint rw_wc, int flags)" },
    310: { name: "getsid", signature: "int getsid(int pid)" },
    311: { name: "settid_with_pid", signature: "int settid_with_pid(int pid, int assume)" },
    312: { name: "psynch_cvclrprepost", signature: "psynch_cvclrprepost(void* cv, uint cvgen, uint cvugen, uint cvsgen, uint prepocnt, uint preposeq, uint flags)" },
    313: { name: "aio_fsync", signature: "int aio_fsync(int op, void* aiocbp)" },
    314: { name: "aio_return", signature: "ssize_t aio_return(aiocb *aiocbp)" },
    315: { name: "aio_suspend", signature: "int aio_suspend(void* aiocblist, int nent, void* timeoutp)" },
    316: { name: "aio_cancel", signature: "int aio_cancel(int fd, aiocb *aiocbp)" },
    317: { name: "aio_error", signature: "int aio_error(aiocb * aiocbp)" },
    318: { name: "aio_read", signature: "int aio_read(aiocb * aiocbp)" },
    319: { name: "aio_write", signature: "int aio_write(void* aiocbp)" },
    320: { name: "lio_listio", signature: "lio_listio(int mode, aiocb *aiocblist[], int nent, sigevent *sigp)" },
    322: { name: "iopolicysys", signature: "int iopolicysys(int cmd, void *arg)" },
    323: { name: "process_policy", signature: "int process_policy(int scope, int action, int policy, int policy_subtype, void* attrp, int target_pid, ulong target_threadid)" },
    324: { name: "mlockall", signature: "int mlockall(int how)" },
    325: { name: "munlockall", signature: "int munlockall(int how)" },
    327: { name: "issetugid", signature: "int issetugid()" },
    328: { name: "__pthread_kill", signature: "int __pthread_kill(int thread_port, int sig)" },
    329: { name: "__pthread_sigmask", signature: "int __pthread_sigmask(int how, void* set, void* oset)" },
    330: { name: "__sigwait", signature: "int __sigwait(sigset_t *set, void* sig)" },
    331: { name: "__disable_threadsignal", signature: "int __disable_threadsignal(int value)" },
    332: { name: "__pthread_markcancel", signature: "int __pthread_markcancel(int thread_port)" },
    333: { name: "__pthread_canceled", signature: "int __pthread_canceled(int action)" },
    334: { name: "__semwait_signal", signature: "int __semwait_signal(int cond_sem, int mutex_sem, int timeout, int relative, int64_t tv_sec, int32_t tv_nsec)" },
    336: { name: "proc_info", signature: "int proc_info(int callnum, int pid, uint flavor, long arg, void* buffer, int buffersize)" },
    338: { name: "stat64", signature: "int stat64(char* path, void* buf)" },
    339: { name: "fstat64", signature: "int fstat64(int fildes, void* buf)" },
    340: { name: "lstat64", signature: "int lstat64(char* path, void* buf)" },
    341: { name: "stat64_extended", signature: "" },
    342: { name: "lstat64_extended", signature: "" },
    343: { name: "fstat64_extended", signature: "" },
    344: { name: "getdirentries64", signature: "size_t getdirentries64(int fd, void *buf, user_size_t bufsize, int *position)" },
    345: { name: "statfs64", signature: "int statfs64(char* path, void* buf)" },
    346: { name: "fstatfs64", signature: "int fstatfs64(int fd, void* buf)" },
    347: { name: "getfsstat64", signature: "int getfsstat64(char* buf, int bufsize, int flags)" },
    348: { name: "__pthread_chdir", signature: "int __pthread_chdir(void* path)" },
    349: { name: "__pthread_fchdir", signature: "int __pthread_fchdir(int fd)" },
    350: { name: "audit", signature: "int audit(void *record, int length)" },
    351: { name: "auditon", signature: "int auditon(int cmd, void* data, int length)" },
    353: { name: "getauid", signature: "int getauid(au_id_t *auid)" },
    354: { name: "setauid", signature: "int setauid(au_id_t *auid)" },
    357: { name: "getaudit_addr", signature: "int getaudit_addr(auditinfo_addr *ai_ad, int length)" },
    358: { name: "setaudit_addr", signature: "int setaudit_addr(auditinfo_addr *ai_ad, int length)" },
    359: { name: "auditctl", signature: "int auditctl(char* path)" },
    360: { name: "bsdthread_create", signature: "void* bsdthread_create(void* func, void* func_arg, void* stack, void* pthread, uint flags)" },
    361: { name: "bsdthread_terminate", signature: "int bsdthread_terminate(void* stackaddr, size_t freesize, uint port, uint sem)" },
    362: { name: "kqueue", signature: "int kqueue()" },
    363: { name: "kevent", signature: "int kevent(int fd, kevent *chglist, int nchanges, kevent *eventlist, int nevents, timespec *timeout)" },
    364: { name: "lchown", signature: "int lchown(char* path, int owner, int group)" },
    365: { name: "stack_snapshot", signature: "int stack_snapshot(int pid, void* tracebuf, uint tracebuf_size, uint flags, uint dispatch_offset)" },
    366: { name: "bsdthread_register", signature: "int bsdthread_register(void* threadstart, void* wqthread, int pthsize, void* dummy_value, void* targetconc_ptr, ulong dispatchqueue_offset)" },
    367: { name: "workq_open", signature: "int workq_open()" },
    368: { name: "workq_kernreturn", signature: "int workq_kernreturn(int options, void* item, int affinity, int prio)" },
    369: { name: "kevent64", signature: "int kevent64(int fd, kevent64_s *changelist, int nchanges, kevent64_s *eventlist, int nevents, unsigned int flags, timespec *timeout)" },
    370: { name: "__old_semwait_signal", signature: "int __old_semwait_signal(int cond_sem, int mutex_sem, int timeout, int relative, timespec *ts)" },
    371: { name: "__old_semwait_signal_nocancel", signature: "int __old_semwait_signal_nocancel(int cond_sem, int mutex_sem, int timeout, int relative, timespec *ts)" },
    372: { name: "thread_selfid", signature: "ulong thread_selfid()" },
    373: { name: "ledger", signature: "" },
    374: { name: "kevent_qos", signature: "" },
    375: { name: "kevent_id", signature: "" },
    394: { name: "setlcid", signature: "int setlcid(int pid, int lcid)" },
    395: { name: "getlcid", signature: "int getlcid(int pid)" },
    396: { name: "read_nocancel", signature: "int read_nocancel(int fd, void* cbuf, user_size_t nbyte)" },
    397: { name: "write_nocancel", signature: "int write_nocancel(int fd, void* cbuf, user_size_t nbyte)" },
    398: { name: "open_nocancel", signature: "int open_nocancel(void* path, int flags, int mode)" },
    399: { name: "close_nocancel", signature: "int close_nocancel(int fd)" },
    400: { name: "wait4_nocancel", signature: "int wait4_nocancel(int pid, void* status, int options, void* rusage)" },
    401: { name: "recvmsg_nocancel", signature: "int recvmsg_nocancel(int s, msghdr *msg, int flags)" },
    402: { name: "sendmsg_nocancel", signature: "int sendmsg_nocancel(int s, caddr_t msg, int flags)" },
    403: { name: "recvfrom_nocancel", signature: "int recvfrom_nocancel(int s, void *buf, size_t len, int flags, sockaddr *from, int *fromlenaddr)" },
    404: { name: "accept_nocancel", signature: "int accept_nocancel(int s, caddr_t name, int *anamelen)" },
    405: { name: "msync_nocancel", signature: "int msync_nocancel(caddr_t addr, size_t len, int flags)" },
    406: { name: "fcntl_nocancel", signature: "int fcntl_nocancel(int fd, int cmd, long arg)" },
    407: { name: "select_nocancel", signature: "int select_nocancel(int nd, uint *in, uint *ou, uint *ex, timeval *tv)" },
    408: { name: "fsync_nocancel", signature: "int fsync_nocancel(int fd)" },
    409: { name: "connect_nocancel", signature: "int connect_nocancel(int s, caddr_t name, int namelen)" },
    410: { name: "sigsuspend_nocancel", signature: "int sigsuspend_nocancel(sigset_t mask)" },
    411: { name: "readv_nocancel", signature: "int readv_nocancel(int fd, iovec *iovp, u_int iovcnt)" },
    412: { name: "writev_nocancel", signature: "int writev_nocancel(int fd, iovec *iovp, u_int iovcnt)" },
    413: { name: "sendto_nocancel", signature: "int sendto_nocancel(int s, caddr_t buf, size_t len, int flags, caddr_t to, int tolen)" },
    414: { name: "pread_nocancel", signature: "int pread_nocancel(int fd, void* buf, user_size_t nbyte, int offset)" },
    415: { name: "pwrite_nocancel", signature: "int pwrite_nocancel(int fd, void* buf, user_size_t nbyte, int offset)" },
    416: { name: "waitid_nocancel", signature: "int waitid_nocancel(idtype_t idtype, id_t id, siginfo_t *infop, int options)" },
    417: { name: "poll_nocancel", signature: "int poll_nocancel(pollfd *fds, u_int nfds, int timeout)" },
    420: { name: "sem_wait_nocancel", signature: "int sem_wait_nocancel(sem_t *sem)" },
    421: { name: "aio_suspend_nocancel", signature: "int aio_suspend_nocancel(void* aiocblist, int nent, void* timeoutp)" },
    422: { name: "__sigwait_nocancel", signature: "int __sigwait_nocancel(void* set, void* sig)" },
    423: { name: "__semwait_signal_nocancel", signature: "int __semwait_signal_nocancel(int cond_sem, int mutex_sem, int timeout, int relative, int64_t tv_sec, int32_t tv_nsec)" },
    427: { name: "fsgetpath", signature: "int fsgetpath(void* buf, size_t bufsize, void* fsid, ulong objid)" },
    428: { name: "audit_session_self", signature: "mach_port_name_t audit_session_self()" },
    429: { name: "audit_session_join", signature: "int audit_session_join(void* port)" },
    430: { name: "fileport_makeport", signature: "int fileport_makeport(int fd, void* portnamep)" },
    431: { name: "fileport_makefd", signature: "int fileport_makefd(void* port)" },
    432: { name: "audit_session_port", signature: "int audit_session_port(ibt asid, void* portnamep)" },
    433: { name: "pid_suspend", signature: "int pid_suspend(int pid)" },
    434: { name: "pid_resume", signature: "int pid_resume(int pid)" },
    435: { name: "pid_hibernate", signature: "int pid_hibernate(int pid)" },
    436: { name: "pid_shutdown_sockets", signature: "int pid_shutdown_sockets(int pid, int level)" },
    438: { name: "shared_region_map_and_slide_np", signature: "int shared_region_map_and_slide_np(int fd, uint count, void* mappings, uint slide, void* slide_start, uint slide_size)" },
    439: { name: "kas_info", signature: "int kas_info(int selector, void* value, void* size)" },
    440: { name: "memorystatus_control", signature: "int memorystatus_control(void* p, void* args, void* ret)" },
    441: { name: "guarded_open_np", signature: "int guarded_open_np(char* path, void* guard, uint guardflags, int flags)" },
    442: { name: "guarded_close_np", signature: "int guarded_close_np(int fd, void* guard);" },
    443: { name: "guarded_kqueue_np", signature: "int guarded_kqueue_np(void* guard, uint guardflags)" },
    444: { name: "change_fdguard_np", signature: "int change_fdguard_np(int fd, void* guard, uint guardflags, void* nguard, uint nguardflags, void* fdflagsp)" },
    445: { name: "usrctl", signature: "int usrctl(uint flags)" },
    446: { name: "proc_rlimit_control", signature: "int proc_rlimit_control(int pid, int flavor, void* arg)" },
    447: { name: "connectx", signature: "int connectx(int socket, void* endpoints, int associd, uint flags, void* iov, uint iovcnt, void* len, void* connid)" },
    448: { name: "disconnectx", signature: "int disconnectx(int s, int aid, int cid)" },
    449: { name: "peeloff", signature: "int peeloff(int s, int aid)" },
    450: { name: "socket_delegate", signature: "int socket_delegate(int domain, int type, int protocol, int epid)" },

    451: { name: "telemetry", signature: "" },
    452: { name: "proc_uuid_policy", signature: "" },
    453: { name: "memorystatus_get_level", signature: "" },
    454: { name: "system_override", signature: "" },
    455: { name: "vfs_purge", signature: "" },
    456: { name: "sfi_ctl", signature: "" },
    457: { name: "sfi_pidctl", signature: "" },
    458: { name: "coalition", signature: "" },
    459: { name: "coalition_info", signature: "" },
    460: { name: "necp_match_policy", signature: "" },
    461: { name: "getattrlistbulk", signature: "" },
    462: { name: "clonefileat", signature: "" },
    463: { name: "openat", signature: "" },
    464: { name: "openat_nocancel", signature: "" },
    465: { name: "renameat", signature: "" },
    466: { name: "faccessat", signature: "" },
    467: { name: "fchmodat", signature: "" },
    468: { name: "fchownat", signature: "" },
    469: { name: "fstatat", signature: "" },
    470: { name: "fstatat64", signature: "" },
    471: { name: "linkat", signature: "" },
    472: { name: "unlinkat", signature: "" },
    473: { name: "readlinkat", signature: "" },
    474: { name: "symlinkat", signature: "" },
    475: { name: "mkdirat", signature: "" },
    476: { name: "getattrlistat", signature: "" },
    477: { name: "proc_trace_log", signature: "" },
    478: { name: "bsdthread_ctl", signature: "" },
    479: { name: "openbyid_np", signature: "" },
    480: { name: "recvmsg_x", signature: "" },
    481: { name: "sendmsg_x", signature: "" },
    482: { name: "thread_selfusage", signature: "" },
    483: { name: "csrctl", signature: "" },
    484: { name: "guarded_open_dprotected_np", signature: "" },
    485: { name: "guarded_write_np", signature: "" },
    486: { name: "guarded_pwrite_np", signature: "" },
    487: { name: "guarded_writev_np", signature: "" },
    488: { name: "renameatx_np", signature: "" },
    489: { name: "mremap_encrypted", signature: "" },
    490: { name: "netagent_trigger", signature: "" },
    491: { name: "stack_snapshot_with_config", signature: "" },
    492: { name: "microstackshot", signature: "" },
    493: { name: "grab_pgo_data", signature: "" },
    494: { name: "persona", signature: "" },
    499: { name: "work_interval_ctl", signature: "" },
    500: { name: "getentropy", signature: "" },

    501: { name: "necp_open", signature: "" },
    502: { name: "necp_client_action", signature: "" },
    515: { name: "ulock_wait", signature: "int ulock_wait(void* p, void* args, void* retval)" },
    516: { name: "ulock_wake", signature: "int ulock_wake(void* p, void* args, void* retval)" },
    517: { name: "fclonefileat", signature: "" },
    518: { name: "fs_snapshot", signature: "" },
    519: { name: "enosys", signature: "" },
    520: { name: "terminate_with_payload", signature: "" },
    521: { name: "abort_with_payload", signature: "" },
    522: { name: "necp_session_open", signature: "" },
    523: { name: "necp_session_action", signature: "" },
    524: { name: "setattrlistat", signature: "" },
    525: { name: "net_qos_guideline", signature: "" },
    526: { name: "fmount", signature: "" },
    527: { name: "ntp_adjtime", signature: "" },
    528: { name: "ntp_gettime", signature: "" },
    529: { name: "os_fault_with_payload", signature: "" },
    530: { name: "kqueue_workloop_ctl", signature: "" },
    531: { name: "__mach_bridge_remote_time", signature: "" },
    532: { name: "coalition_ledger", signature: "" },
    533: { name: "log_data", signature: "" },
    534: { name: "memorystatus_available_memory", signature: "" },
    535: { name: "objc_bp_assist_cfg_np", signature: "" },
    536: { name: "shared_region_map_and_slide_2_np", signature: "" },
    537: { name: "pivot_root", signature: "" },
    538: { name: "task_inspect_for_pid", signature: "" },
    539: { name: "task_read_for_pid", signature: "" },
    540: { name: "preadv", signature: "" },
    541: { name: "pwritev", signature: "" },
    542: { name: "preadv_nocancel", signature: "" },
    543: { name: "pwritev_nocancel", signature: "" },
    544: { name: "ulock_wait2", signature: "" },
    545: { name: "proc_info_extended_id", signature: "" },
    546: { name: "tracker_action", signature: "" },
    547: { name: "debug_syscall_reject", signature: "" },
    551: { name: "freadlink", signature: "" },
    552: { name: "record_system_event", signature: "" },
    553: { name: "mkfifoat", signature: "" },
    554: { name: "mknodat", signature: "" },
    555: { name: "ungraftdmg", signature: "" },
    556: { name: "MAXSYSCALL", signature: "" }
}
